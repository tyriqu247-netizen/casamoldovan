import { useState, useEffect } from 'react';
import useIntlContext from './use-intl.esm11.js';

function getNow() {
  return new Date();
}
/**
 * Reading the current date via `new Date()` in components should be avoided, as
 * it causes components to be impure and can lead to flaky tests. Instead, this
 * hook can be used.
 *
 * By default, it returns the time when the component mounts. If `updateInterval`
 * is specified, the value will be updated based on the interval.
 *
 * You can however also return a static value from this hook, if you
 * configure the `now` parameter on the context provider. Note however,
 * that if `updateInterval` is configured in this case, the component
 * will initialize with the global value, but will afterwards update
 * continuously based on the interval.
 *
 * For unit tests, this can be mocked to a constant value. For end-to-end
 * testing, an environment parameter can be passed to the `now` parameter
 * of the provider to mock this to a static value.
 */
function useNow(options) {
  var updateInterval = options == null ? void 0 : options.updateInterval;
  var _useIntlContext = useIntlContext(),
    globalNow = _useIntlContext.now;
  var _useState = useState(globalNow || getNow()),
    now = _useState[0],
    setNow = _useState[1];
  useEffect(function () {
    if (!updateInterval) return;
    var intervalId = setInterval(function () {
      setNow(getNow());
    }, updateInterval);
    return function () {
      clearInterval(intervalId);
    };
  }, [globalNow, updateInterval]);
  return now;
}

export { useNow as default };
//# sourceMappingURL=use-intl.esm4.js.map
