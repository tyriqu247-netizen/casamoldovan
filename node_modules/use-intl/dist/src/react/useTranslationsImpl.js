import { useMemo } from 'react';
import createBaseTranslator, { getMessagesOrError } from '../core/createBaseTranslator';
import resolveNamespace from '../core/resolveNamespace';
import useIntlContext from './useIntlContext';
export default function useTranslationsImpl(allMessages, namespace, namespacePrefix) {
    const { defaultTranslationValues, formats: globalFormats, getMessageFallback, locale, messageFormatCache, onError, timeZone } = useIntlContext();
    // The `namespacePrefix` is part of the type system.
    // See the comment in the hook invocation.
    allMessages = allMessages[namespacePrefix];
    namespace = resolveNamespace(namespace, namespacePrefix);
    const messagesOrError = useMemo(() => getMessagesOrError({ messages: allMessages, namespace, onError }), [allMessages, namespace, onError]);
    const translate = useMemo(() => createBaseTranslator({
        messageFormatCache,
        getMessageFallback,
        messagesOrError,
        defaultTranslationValues,
        namespace,
        onError,
        formats: globalFormats,
        locale,
        timeZone
    }), [
        messageFormatCache,
        getMessageFallback,
        messagesOrError,
        defaultTranslationValues,
        namespace,
        onError,
        globalFormats,
        locale,
        timeZone
    ]);
    return translate;
}
//# sourceMappingURL=useTranslationsImpl.js.map