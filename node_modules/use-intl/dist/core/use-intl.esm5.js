import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/use-intl.esm.js';
import IntlError, { IntlErrorCode } from './use-intl.esm.js';
import createBaseTranslator, { getMessagesOrError } from './use-intl.esm7.js';
import resolveNamespace from './use-intl.esm8.js';

var _excluded = ["getMessageFallback", "messages", "namespace", "onError"];
function createTranslatorImpl(_ref, namespacePrefix) {
  var getMessageFallback = _ref.getMessageFallback,
    messages = _ref.messages,
    namespace = _ref.namespace,
    onError = _ref.onError,
    rest = _objectWithoutPropertiesLoose(_ref, _excluded);
  // The `namespacePrefix` is part of the type system.
  // See the comment in the function invocation.
  messages = messages[namespacePrefix];
  namespace = resolveNamespace(namespace, namespacePrefix);
  var translator = createBaseTranslator(_extends({}, rest, {
    onError: onError,
    getMessageFallback: getMessageFallback,
    messagesOrError: getMessagesOrError({
      messages: messages,
      namespace: namespace,
      onError: onError
    })
  }));
  var originalRich = translator.rich;
  function base() {
    return translator.apply(void 0, arguments);
  }
  // Augment `t.rich` to return plain strings
  base.rich = function (key, /** Key value pairs for values to interpolate into the message. */
  values, formats) {
    // `chunks` is returned as a string when no React element
    // is used, therefore it's safe to cast this type.
    var result = originalRich(key, values, formats);
    // When only string chunks are provided to the parser, only strings should be returned here.
    if (typeof result !== 'string') {
      var error = new IntlError(IntlErrorCode.FORMATTING_ERROR, process.env.NODE_ENV !== 'production' ? "`createTranslator` only accepts functions for rich text formatting that receive and return strings.\n\nE.g. t.rich('rich', {b: (chunks) => `<b>${chunks}</b>`})" : undefined);
      onError(error);
      return getMessageFallback({
        error: error,
        key: key,
        namespace: namespace
      });
    }
    return result;
  };
  base.raw = translator.raw;
  return base;
}

export { createTranslatorImpl as default };
//# sourceMappingURL=use-intl.esm5.js.map
