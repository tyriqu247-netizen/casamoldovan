{"version":3,"file":"use-intl.esm7.js","sources":["../../src/core/createBaseTranslator.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-named-as-default -- False positive\nimport IntlMessageFormat from 'intl-messageformat';\nimport {\n  cloneElement,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  ReactNodeArray\n} from 'react';\nimport AbstractIntlMessages from './AbstractIntlMessages';\nimport Formats from './Formats';\nimport {InitializedIntlConfig} from './IntlConfig';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport MessageFormatCache from './MessageFormatCache';\nimport TranslationValues, {RichTranslationValues} from './TranslationValues';\nimport convertFormatsToIntlMessageFormat from './convertFormatsToIntlMessageFormat';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\nfunction resolvePath(\n  messages: AbstractIntlMessages | undefined,\n  key: string,\n  namespace?: string\n) {\n  if (!messages) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? `No messages available at \\`${namespace}\\`.`\n        : undefined\n    );\n  }\n\n  let message = messages;\n\n  key.split('.').forEach((part) => {\n    const next = (message as any)[part];\n\n    if (part == null || next == null) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `Could not resolve \\`${key}\\` in ${\n              namespace ? `\\`${namespace}\\`` : 'messages'\n            }.`\n          : undefined\n      );\n    }\n\n    message = next;\n  });\n\n  return message;\n}\n\nfunction prepareTranslationValues(values: RichTranslationValues) {\n  if (Object.keys(values).length === 0) return undefined;\n\n  // Workaround for https://github.com/formatjs/formatjs/issues/1467\n  const transformedValues: RichTranslationValues = {};\n  Object.keys(values).forEach((key) => {\n    let index = 0;\n    const value = values[key];\n\n    let transformed;\n    if (typeof value === 'function') {\n      transformed = (chunks: ReactNode) => {\n        const result = value(chunks);\n\n        return isValidElement(result)\n          ? cloneElement(result, {key: key + index++})\n          : result;\n      };\n    } else {\n      transformed = value;\n    }\n\n    transformedValues[key] = transformed;\n  });\n\n  return transformedValues;\n}\n\nexport function getMessagesOrError<Messages extends AbstractIntlMessages>({\n  messages,\n  namespace,\n  onError = defaultOnError\n}: {\n  messages: Messages;\n  namespace?: string;\n  onError?(error: IntlError): void;\n}) {\n  try {\n    if (!messages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages were configured on the provider.`\n          : undefined\n      );\n    }\n\n    const retrievedMessages = namespace\n      ? resolvePath(messages, namespace)\n      : messages;\n\n    if (!retrievedMessages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages for namespace \\`${namespace}\\` found.`\n          : undefined\n      );\n    }\n\n    return retrievedMessages;\n  } catch (error) {\n    const intlError = new IntlError(\n      IntlErrorCode.MISSING_MESSAGE,\n      (error as Error).message\n    );\n    onError(intlError);\n    return intlError;\n  }\n}\n\nexport type CreateBaseTranslatorProps<Messages> = InitializedIntlConfig & {\n  messageFormatCache?: MessageFormatCache;\n  defaultTranslationValues?: RichTranslationValues;\n  namespace?: string;\n  messagesOrError: Messages | IntlError;\n};\n\nfunction getPlainMessage(candidate: string, values?: unknown) {\n  if (values) return undefined;\n\n  const unescapedMessage = candidate.replace(/'([{}])/gi, '$1');\n\n  // Placeholders can be in the message if there are default values,\n  // or if the user has forgotten to provide values. In the latter\n  // case we need to compile the message to receive an error.\n  const hasPlaceholders = /<|{/.test(unescapedMessage);\n\n  if (!hasPlaceholders) {\n    return unescapedMessage;\n  }\n\n  return undefined;\n}\n\nexport default function createBaseTranslator<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>({\n  defaultTranslationValues,\n  formats: globalFormats,\n  getMessageFallback = defaultGetMessageFallback,\n  locale,\n  messageFormatCache,\n  messagesOrError,\n  namespace,\n  onError,\n  timeZone\n}: CreateBaseTranslatorProps<Messages>) {\n  function getFallbackFromErrorAndNotify(\n    key: string,\n    code: IntlErrorCode,\n    message?: string\n  ) {\n    const error = new IntlError(code, message);\n    onError(error);\n    return getMessageFallback({error, key, namespace});\n  }\n\n  function translateBaseFn(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: RichTranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    let message;\n    try {\n      message = resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n\n    function joinPath(parts: Array<string | undefined>) {\n      return parts.filter((part) => part != null).join('.');\n    }\n\n    const cacheKey = joinPath([locale, namespace, key, String(message)]);\n\n    let messageFormat: IntlMessageFormat;\n    if (messageFormatCache?.has(cacheKey)) {\n      messageFormat = messageFormatCache.get(cacheKey)!;\n    } else {\n      if (typeof message === 'object') {\n        let code, errorMessage;\n        if (Array.isArray(message)) {\n          code = IntlErrorCode.INVALID_MESSAGE;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an array, but only strings are supported. See https://next-intl-docs.vercel.app/docs/usage/messages#arrays-of-messages`;\n          }\n        } else {\n          code = IntlErrorCode.INSUFFICIENT_PATH;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an object, but only strings are supported. Use a \\`.\\` to retrieve nested messages. See https://next-intl-docs.vercel.app/docs/usage/messages#structuring-messages`;\n          }\n        }\n\n        return getFallbackFromErrorAndNotify(key, code, errorMessage);\n      }\n\n      // Hot path that avoids creating an `IntlMessageFormat` instance\n      const plainMessage = getPlainMessage(message as string, values);\n      if (plainMessage) return plainMessage;\n\n      try {\n        messageFormat = new IntlMessageFormat(\n          message,\n          locale,\n          convertFormatsToIntlMessageFormat(\n            {...globalFormats, ...formats},\n            timeZone\n          )\n        );\n      } catch (error) {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INVALID_MESSAGE,\n          (error as Error).message\n        );\n      }\n\n      messageFormatCache?.set(cacheKey, messageFormat);\n    }\n\n    try {\n      const formattedMessage = messageFormat.format(\n        // @ts-ignore `intl-messageformat` expects a different format\n        // for rich text elements since a recent minor update. This\n        // needs to be evaluated in detail, possibly also in regards\n        // to be able to format to parts.\n        prepareTranslationValues({...defaultTranslationValues, ...values})\n      );\n\n      if (formattedMessage == null) {\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `Unable to format \\`${key}\\` in ${\n                namespace ? `namespace \\`${namespace}\\`` : 'messages'\n              }`\n            : undefined\n        );\n      }\n\n      // Limit the function signature to return strings or React elements\n      return isValidElement(formattedMessage) ||\n        // Arrays of React elements\n        Array.isArray(formattedMessage) ||\n        typeof formattedMessage === 'string'\n        ? formattedMessage\n        : String(formattedMessage);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.FORMATTING_ERROR,\n        (error as Error).message\n      );\n    }\n  }\n\n  function translateFn<\n    TargetKey extends MessageKeys<\n      NestedValueOf<Messages, NestedKey>,\n      NestedKeyOf<NestedValueOf<Messages, NestedKey>>\n    >\n  >(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: TargetKey,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: TranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string {\n    const result = translateBaseFn(key, values, formats);\n\n    if (typeof result !== 'string') {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.INVALID_MESSAGE,\n        process.env.NODE_ENV !== 'production'\n          ? `The message \\`${key}\\` in ${\n              namespace ? `namespace \\`${namespace}\\`` : 'messages'\n            } didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`\n          : undefined\n      );\n    }\n\n    return result;\n  }\n\n  translateFn.rich = translateBaseFn;\n\n  translateFn.raw = (\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string\n  ): any => {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    try {\n      return resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n  };\n\n  return translateFn;\n}\n"],"names":["resolvePath","messages","key","namespace","Error","process","env","NODE_ENV","undefined","message","split","forEach","part","next","prepareTranslationValues","values","Object","keys","length","transformedValues","index","value","transformed","chunks","result","isValidElement","cloneElement","getMessagesOrError","_ref","_ref$onError","onError","defaultOnError","retrievedMessages","error","intlError","IntlError","IntlErrorCode","MISSING_MESSAGE","getPlainMessage","candidate","unescapedMessage","replace","hasPlaceholders","test","createBaseTranslator","_ref2","defaultTranslationValues","globalFormats","formats","_ref2$getMessageFallb","getMessageFallback","defaultGetMessageFallback","locale","messageFormatCache","messagesOrError","timeZone","getFallbackFromErrorAndNotify","code","translateBaseFn","joinPath","parts","filter","join","cacheKey","String","messageFormat","has","get","errorMessage","Array","isArray","INVALID_MESSAGE","INSUFFICIENT_PATH","plainMessage","IntlMessageFormat","convertFormatsToIntlMessageFormat","_extends","set","formattedMessage","format","FORMATTING_ERROR","translateFn","rich","raw"],"mappings":"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"}