import { extends as _extends } from '../_virtual/use-intl.esm.js';
import IntlMessageFormat from 'intl-messageformat';

function setTimeZoneInFormats(formats, timeZone) {
  if (!formats) return formats;
  // The only way to set a time zone with `intl-messageformat` is to merge it into the formats
  // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15
  return Object.keys(formats).reduce(function (acc, key) {
    acc[key] = _extends({
      timeZone: timeZone
    }, formats[key]);
    return acc;
  }, {});
}
/**
 * `intl-messageformat` uses separate keys for `date` and `time`, but there's
 * only one native API: `Intl.DateTimeFormat`. Additionally you might want to
 * include both a time and a date in a value, therefore the separation doesn't
 * seem so useful. We offer a single `dateTime` namespace instead, but we have
 * to convert the format before `intl-messageformat` can be used.
 */
function convertFormatsToIntlMessageFormat(formats, timeZone) {
  var formatsWithTimeZone = timeZone ? _extends({}, formats, {
    dateTime: setTimeZoneInFormats(formats.dateTime, timeZone)
  }) : formats;
  var mfDateDefaults = IntlMessageFormat.formats.date;
  var defaultDateFormats = timeZone ? setTimeZoneInFormats(mfDateDefaults, timeZone) : mfDateDefaults;
  var mfTimeDefaults = IntlMessageFormat.formats.time;
  var defaultTimeFormats = timeZone ? setTimeZoneInFormats(mfTimeDefaults, timeZone) : mfTimeDefaults;
  return _extends({}, formatsWithTimeZone, {
    date: _extends({}, defaultDateFormats, formatsWithTimeZone == null ? void 0 : formatsWithTimeZone.dateTime),
    time: _extends({}, defaultTimeFormats, formatsWithTimeZone == null ? void 0 : formatsWithTimeZone.dateTime)
  });
}

export { convertFormatsToIntlMessageFormat as default };
//# sourceMappingURL=use-intl.esm10.js.map
