{"version":3,"file":"use-intl.esm3.js","sources":["../../src/core/createFormatter.tsx"],"sourcesContent":["import DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport NumberFormatOptions from './NumberFormatOptions';\nimport RelativeTimeFormatOptions from './RelativeTimeFormatOptions';\nimport TimeZone from './TimeZone';\nimport {defaultOnError} from './defaults';\n\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst QUARTER = MONTH * 3;\nconst YEAR = DAY * 365;\n\nconst UNIT_SECONDS: Record<Intl.RelativeTimeFormatUnit, number> = {\n  second: SECOND,\n  seconds: SECOND,\n  minute: MINUTE,\n  minutes: MINUTE,\n  hour: HOUR,\n  hours: HOUR,\n  day: DAY,\n  days: DAY,\n  week: WEEK,\n  weeks: WEEK,\n  month: MONTH,\n  months: MONTH,\n  quarter: QUARTER,\n  quarters: QUARTER,\n  year: YEAR,\n  years: YEAR\n} as const;\n\nfunction resolveRelativeTimeUnit(seconds: number) {\n  const absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  } else if (absValue < HOUR) {\n    return 'minute';\n  } else if (absValue < DAY) {\n    return 'hour';\n  } else if (absValue < WEEK) {\n    return 'day';\n  } else if (absValue < MONTH) {\n    return 'week';\n  } else if (absValue < YEAR) {\n    return 'month';\n  }\n  return 'year';\n}\n\nfunction calculateRelativeTimeValue(\n  seconds: number,\n  unit: Intl.RelativeTimeFormatUnit\n) {\n  // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n  // will include fractions like '2.1 hours ago'.\n  return Math.round(seconds / UNIT_SECONDS[unit]);\n}\n\ntype Props = {\n  locale: string;\n  timeZone?: TimeZone;\n  onError?(error: IntlError): void;\n  formats?: Partial<Formats>;\n  now?: Date;\n};\n\nexport default function createFormatter({\n  formats,\n  locale,\n  now: globalNow,\n  onError = defaultOnError,\n  timeZone: globalTimeZone\n}: Props) {\n  function resolveFormatOrOptions<Options>(\n    typeFormats: Record<string, Options> | undefined,\n    formatOrOptions?: string | Options\n  ) {\n    let options;\n    if (typeof formatOrOptions === 'string') {\n      const formatName = formatOrOptions;\n      options = typeFormats?.[formatName];\n\n      if (!options) {\n        const error = new IntlError(\n          IntlErrorCode.MISSING_FORMAT,\n          process.env.NODE_ENV !== 'production'\n            ? `Format \\`${formatName}\\` is not available. You can configure it on the provider or provide custom options.`\n            : undefined\n        );\n        onError(error);\n        throw error;\n      }\n    } else {\n      options = formatOrOptions;\n    }\n\n    return options;\n  }\n\n  function getFormattedValue<Value, Options>(\n    value: Value,\n    formatOrOptions: string | Options | undefined,\n    typeFormats: Record<string, Options> | undefined,\n    formatter: (options?: Options) => string\n  ) {\n    let options;\n    try {\n      options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n    } catch (error) {\n      return String(value);\n    }\n\n    try {\n      return formatter(options);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(value);\n    }\n  }\n\n  function dateTime(\n    /** If a number is supplied, this is interpreted as a UTC timestamp. */\n    value: Date | number,\n    /** If a time zone is supplied, the `value` is converted to that time zone.\n     * Otherwise the user time zone will be used. */\n    formatOrOptions?: string | DateTimeFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.dateTime,\n      (options) => {\n        if (!options?.timeZone) {\n          if (globalTimeZone) {\n            options = {...options, timeZone: globalTimeZone};\n          } else {\n            onError(\n              new IntlError(\n                IntlErrorCode.ENVIRONMENT_FALLBACK,\n                process.env.NODE_ENV !== 'production'\n                  ? `The \\`timeZone\\` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#time-zone`\n                  : undefined\n              )\n            );\n          }\n        }\n\n        return new Intl.DateTimeFormat(locale, options).format(value);\n      }\n    );\n  }\n\n  function number(\n    value: number | bigint,\n    formatOrOptions?: string | NumberFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.number,\n      (options) => new Intl.NumberFormat(locale, options).format(value)\n    );\n  }\n\n  function getGlobalNow() {\n    if (globalNow) {\n      return globalNow;\n    } else {\n      onError(\n        new IntlError(\n          IntlErrorCode.ENVIRONMENT_FALLBACK,\n          process.env.NODE_ENV !== 'production'\n            ? `The \\`now\\` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#now`\n            : undefined\n        )\n      );\n      return new Date();\n    }\n  }\n\n  function extractNowDate(\n    nowOrOptions?: RelativeTimeFormatOptions['now'] | RelativeTimeFormatOptions\n  ) {\n    if (nowOrOptions instanceof Date || typeof nowOrOptions === 'number') {\n      return new Date(nowOrOptions);\n    }\n    if (nowOrOptions?.now !== undefined) {\n      return new Date(nowOrOptions.now);\n    }\n    return getGlobalNow();\n  }\n\n  function relativeTime(\n    /** The date time that needs to be formatted. */\n    date: number | Date,\n    /** The reference point in time to which `date` will be formatted in relation to.  */\n    nowOrOptions?: RelativeTimeFormatOptions['now'] | RelativeTimeFormatOptions\n  ) {\n    try {\n      const dateDate = new Date(date);\n      const nowDate = extractNowDate(nowOrOptions);\n      const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n\n      const unit =\n        typeof nowOrOptions === 'number' ||\n        nowOrOptions instanceof Date ||\n        nowOrOptions?.unit === undefined\n          ? resolveRelativeTimeUnit(seconds)\n          : nowOrOptions.unit;\n\n      const value = calculateRelativeTimeValue(seconds, unit);\n\n      return new Intl.RelativeTimeFormat(locale, {\n        numeric: 'auto'\n      }).format(value, unit);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(date);\n    }\n  }\n\n  function list(\n    value: Iterable<string>,\n    formatOrOptions?: string | Intl.ListFormatOptions\n  ) {\n    return getFormattedValue(value, formatOrOptions, formats?.list, (options) =>\n      new Intl.ListFormat(locale, options).format(value)\n    );\n  }\n\n  return {dateTime, number, relativeTime, list};\n}\n"],"names":["SECOND","MINUTE","HOUR","DAY","WEEK","MONTH","QUARTER","YEAR","UNIT_SECONDS","second","seconds","minute","minutes","hour","hours","day","days","week","weeks","month","months","quarter","quarters","year","years","resolveRelativeTimeUnit","absValue","Math","abs","calculateRelativeTimeValue","unit","round","createFormatter","_ref","formats","locale","globalNow","now","_ref$onError","onError","defaultOnError","globalTimeZone","timeZone","resolveFormatOrOptions","typeFormats","formatOrOptions","options","formatName","error","IntlError","IntlErrorCode","MISSING_FORMAT","process","env","NODE_ENV","undefined","getFormattedValue","value","formatter","String","FORMATTING_ERROR","message","dateTime","_options","_extends","ENVIRONMENT_FALLBACK","Intl","DateTimeFormat","format","number","NumberFormat","getGlobalNow","Date","extractNowDate","nowOrOptions","relativeTime","date","dateDate","nowDate","getTime","RelativeTimeFormat","numeric","list","ListFormat"],"mappings":"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"}