import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/use-intl.esm.js';
import createTranslatorImpl from './use-intl.esm5.js';
import { defaultGetMessageFallback, defaultOnError } from './use-intl.esm6.js';

var _excluded = ["getMessageFallback", "messages", "namespace", "onError"];
/**
 * Translates messages from the given namespace by using the ICU syntax.
 * See https://formatjs.io/docs/core-concepts/icu-syntax.
 *
 * If no namespace is provided, all available messages are returned.
 * The namespace can also indicate nesting by using a dot
 * (e.g. `namespace.Component`).
 */
function createTranslator(_ref) {
  var _ref$getMessageFallba = _ref.getMessageFallback,
    getMessageFallback = _ref$getMessageFallba === void 0 ? defaultGetMessageFallback : _ref$getMessageFallba,
    messages = _ref.messages,
    namespace = _ref.namespace,
    _ref$onError = _ref.onError,
    onError = _ref$onError === void 0 ? defaultOnError : _ref$onError,
    rest = _objectWithoutPropertiesLoose(_ref, _excluded);
  // We have to wrap the actual function so the type inference for the optional
  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045
  // The prefix ("!") is arbitrary.
  return createTranslatorImpl(_extends({}, rest, {
    onError: onError,
    getMessageFallback: getMessageFallback,
    messages: {
      '!': messages
    },
    namespace: namespace ? "!." + namespace : '!'
  }), '!');
}

export { createTranslator as default };
//# sourceMappingURL=use-intl.esm2.js.map
