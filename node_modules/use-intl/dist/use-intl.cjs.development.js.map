{"version":3,"file":"use-intl.cjs.development.js","sources":["../src/core/IntlError.tsx","../src/core/convertFormatsToIntlMessageFormat.tsx","../src/core/defaults.tsx","../src/core/createBaseTranslator.tsx","../src/core/resolveNamespace.tsx","../src/core/createTranslatorImpl.tsx","../src/core/createTranslator.tsx","../src/core/createFormatter.tsx","../src/core/createIntl.tsx","../src/react/IntlContext.tsx","../src/core/validateMessages.tsx","../src/react/getInitializedConfig.tsx","../src/react/IntlProvider.tsx","../src/react/useIntlContext.tsx","../src/react/useTranslationsImpl.tsx","../src/react/useTranslations.tsx","../src/react/useLocale.tsx","../src/react/useNow.tsx","../src/react/useTimeZone.tsx","../src/react/useMessages.tsx","../src/react/useFormatter.tsx","../src/react/useIntl.tsx"],"sourcesContent":["export enum IntlErrorCode {\n  MISSING_MESSAGE = 'MISSING_MESSAGE',\n  MISSING_FORMAT = 'MISSING_FORMAT',\n  ENVIRONMENT_FALLBACK = 'ENVIRONMENT_FALLBACK',\n  INSUFFICIENT_PATH = 'INSUFFICIENT_PATH',\n  INVALID_MESSAGE = 'INVALID_MESSAGE',\n  INVALID_KEY = 'INVALID_KEY',\n  FORMATTING_ERROR = 'FORMATTING_ERROR'\n}\n\nexport default class IntlError extends Error {\n  public readonly code: IntlErrorCode;\n  public readonly originalMessage: string | undefined;\n\n  constructor(code: IntlErrorCode, originalMessage?: string) {\n    let message: string = code;\n    if (originalMessage) {\n      message += ': ' + originalMessage;\n    }\n    super(message);\n\n    this.code = code;\n    if (originalMessage) {\n      this.originalMessage = originalMessage;\n    }\n  }\n}\n","// eslint-disable-next-line import/no-named-as-default -- False positive\nimport IntlMessageFormat, {Formats as IntlFormats} from 'intl-messageformat';\nimport DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport TimeZone from './TimeZone';\n\nfunction setTimeZoneInFormats(\n  formats: Record<string, DateTimeFormatOptions> | undefined,\n  timeZone: TimeZone\n) {\n  if (!formats) return formats;\n\n  // The only way to set a time zone with `intl-messageformat` is to merge it into the formats\n  // https://github.com/formatjs/formatjs/blob/8256c5271505cf2606e48e3c97ecdd16ede4f1b5/packages/intl/src/message.ts#L15\n  return Object.keys(formats).reduce(\n    (acc: Record<string, DateTimeFormatOptions>, key) => {\n      acc[key] = {\n        timeZone,\n        ...formats[key]\n      };\n      return acc;\n    },\n    {}\n  );\n}\n\n/**\n * `intl-messageformat` uses separate keys for `date` and `time`, but there's\n * only one native API: `Intl.DateTimeFormat`. Additionally you might want to\n * include both a time and a date in a value, therefore the separation doesn't\n * seem so useful. We offer a single `dateTime` namespace instead, but we have\n * to convert the format before `intl-messageformat` can be used.\n */\nexport default function convertFormatsToIntlMessageFormat(\n  formats: Partial<Formats>,\n  timeZone?: TimeZone\n): Partial<IntlFormats> {\n  const formatsWithTimeZone = timeZone\n    ? {...formats, dateTime: setTimeZoneInFormats(formats.dateTime, timeZone)}\n    : formats;\n\n  const mfDateDefaults = IntlMessageFormat.formats.date as Formats['dateTime'];\n  const defaultDateFormats = timeZone\n    ? setTimeZoneInFormats(mfDateDefaults, timeZone)\n    : mfDateDefaults;\n\n  const mfTimeDefaults = IntlMessageFormat.formats.time as Formats['dateTime'];\n  const defaultTimeFormats = timeZone\n    ? setTimeZoneInFormats(mfTimeDefaults, timeZone)\n    : mfTimeDefaults;\n\n  return {\n    ...formatsWithTimeZone,\n    date: {\n      ...defaultDateFormats,\n      ...formatsWithTimeZone?.dateTime\n    },\n    time: {\n      ...defaultTimeFormats,\n      ...formatsWithTimeZone?.dateTime\n    }\n  };\n}\n","import IntlError from './IntlError';\n\n/**\n * Contains defaults that are used for all entry points into the core.\n * See also `InitializedIntlConfiguration`.\n */\n\nexport function defaultGetMessageFallback(props: {\n  error: IntlError;\n  key: string;\n  namespace?: string;\n}) {\n  return [props.namespace, props.key].filter((part) => part != null).join('.');\n}\n\nexport function defaultOnError(error: IntlError) {\n  console.error(error);\n}\n","// eslint-disable-next-line import/no-named-as-default -- False positive\nimport IntlMessageFormat from 'intl-messageformat';\nimport {\n  cloneElement,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  ReactNodeArray\n} from 'react';\nimport AbstractIntlMessages from './AbstractIntlMessages';\nimport Formats from './Formats';\nimport {InitializedIntlConfig} from './IntlConfig';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport MessageFormatCache from './MessageFormatCache';\nimport TranslationValues, {RichTranslationValues} from './TranslationValues';\nimport convertFormatsToIntlMessageFormat from './convertFormatsToIntlMessageFormat';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\nfunction resolvePath(\n  messages: AbstractIntlMessages | undefined,\n  key: string,\n  namespace?: string\n) {\n  if (!messages) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? `No messages available at \\`${namespace}\\`.`\n        : undefined\n    );\n  }\n\n  let message = messages;\n\n  key.split('.').forEach((part) => {\n    const next = (message as any)[part];\n\n    if (part == null || next == null) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `Could not resolve \\`${key}\\` in ${\n              namespace ? `\\`${namespace}\\`` : 'messages'\n            }.`\n          : undefined\n      );\n    }\n\n    message = next;\n  });\n\n  return message;\n}\n\nfunction prepareTranslationValues(values: RichTranslationValues) {\n  if (Object.keys(values).length === 0) return undefined;\n\n  // Workaround for https://github.com/formatjs/formatjs/issues/1467\n  const transformedValues: RichTranslationValues = {};\n  Object.keys(values).forEach((key) => {\n    let index = 0;\n    const value = values[key];\n\n    let transformed;\n    if (typeof value === 'function') {\n      transformed = (chunks: ReactNode) => {\n        const result = value(chunks);\n\n        return isValidElement(result)\n          ? cloneElement(result, {key: key + index++})\n          : result;\n      };\n    } else {\n      transformed = value;\n    }\n\n    transformedValues[key] = transformed;\n  });\n\n  return transformedValues;\n}\n\nexport function getMessagesOrError<Messages extends AbstractIntlMessages>({\n  messages,\n  namespace,\n  onError = defaultOnError\n}: {\n  messages: Messages;\n  namespace?: string;\n  onError?(error: IntlError): void;\n}) {\n  try {\n    if (!messages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages were configured on the provider.`\n          : undefined\n      );\n    }\n\n    const retrievedMessages = namespace\n      ? resolvePath(messages, namespace)\n      : messages;\n\n    if (!retrievedMessages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages for namespace \\`${namespace}\\` found.`\n          : undefined\n      );\n    }\n\n    return retrievedMessages;\n  } catch (error) {\n    const intlError = new IntlError(\n      IntlErrorCode.MISSING_MESSAGE,\n      (error as Error).message\n    );\n    onError(intlError);\n    return intlError;\n  }\n}\n\nexport type CreateBaseTranslatorProps<Messages> = InitializedIntlConfig & {\n  messageFormatCache?: MessageFormatCache;\n  defaultTranslationValues?: RichTranslationValues;\n  namespace?: string;\n  messagesOrError: Messages | IntlError;\n};\n\nfunction getPlainMessage(candidate: string, values?: unknown) {\n  if (values) return undefined;\n\n  const unescapedMessage = candidate.replace(/'([{}])/gi, '$1');\n\n  // Placeholders can be in the message if there are default values,\n  // or if the user has forgotten to provide values. In the latter\n  // case we need to compile the message to receive an error.\n  const hasPlaceholders = /<|{/.test(unescapedMessage);\n\n  if (!hasPlaceholders) {\n    return unescapedMessage;\n  }\n\n  return undefined;\n}\n\nexport default function createBaseTranslator<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>({\n  defaultTranslationValues,\n  formats: globalFormats,\n  getMessageFallback = defaultGetMessageFallback,\n  locale,\n  messageFormatCache,\n  messagesOrError,\n  namespace,\n  onError,\n  timeZone\n}: CreateBaseTranslatorProps<Messages>) {\n  function getFallbackFromErrorAndNotify(\n    key: string,\n    code: IntlErrorCode,\n    message?: string\n  ) {\n    const error = new IntlError(code, message);\n    onError(error);\n    return getMessageFallback({error, key, namespace});\n  }\n\n  function translateBaseFn(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: RichTranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    let message;\n    try {\n      message = resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n\n    function joinPath(parts: Array<string | undefined>) {\n      return parts.filter((part) => part != null).join('.');\n    }\n\n    const cacheKey = joinPath([locale, namespace, key, String(message)]);\n\n    let messageFormat: IntlMessageFormat;\n    if (messageFormatCache?.has(cacheKey)) {\n      messageFormat = messageFormatCache.get(cacheKey)!;\n    } else {\n      if (typeof message === 'object') {\n        let code, errorMessage;\n        if (Array.isArray(message)) {\n          code = IntlErrorCode.INVALID_MESSAGE;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an array, but only strings are supported. See https://next-intl-docs.vercel.app/docs/usage/messages#arrays-of-messages`;\n          }\n        } else {\n          code = IntlErrorCode.INSUFFICIENT_PATH;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an object, but only strings are supported. Use a \\`.\\` to retrieve nested messages. See https://next-intl-docs.vercel.app/docs/usage/messages#structuring-messages`;\n          }\n        }\n\n        return getFallbackFromErrorAndNotify(key, code, errorMessage);\n      }\n\n      // Hot path that avoids creating an `IntlMessageFormat` instance\n      const plainMessage = getPlainMessage(message as string, values);\n      if (plainMessage) return plainMessage;\n\n      try {\n        messageFormat = new IntlMessageFormat(\n          message,\n          locale,\n          convertFormatsToIntlMessageFormat(\n            {...globalFormats, ...formats},\n            timeZone\n          )\n        );\n      } catch (error) {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INVALID_MESSAGE,\n          (error as Error).message\n        );\n      }\n\n      messageFormatCache?.set(cacheKey, messageFormat);\n    }\n\n    try {\n      const formattedMessage = messageFormat.format(\n        // @ts-ignore `intl-messageformat` expects a different format\n        // for rich text elements since a recent minor update. This\n        // needs to be evaluated in detail, possibly also in regards\n        // to be able to format to parts.\n        prepareTranslationValues({...defaultTranslationValues, ...values})\n      );\n\n      if (formattedMessage == null) {\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `Unable to format \\`${key}\\` in ${\n                namespace ? `namespace \\`${namespace}\\`` : 'messages'\n              }`\n            : undefined\n        );\n      }\n\n      // Limit the function signature to return strings or React elements\n      return isValidElement(formattedMessage) ||\n        // Arrays of React elements\n        Array.isArray(formattedMessage) ||\n        typeof formattedMessage === 'string'\n        ? formattedMessage\n        : String(formattedMessage);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.FORMATTING_ERROR,\n        (error as Error).message\n      );\n    }\n  }\n\n  function translateFn<\n    TargetKey extends MessageKeys<\n      NestedValueOf<Messages, NestedKey>,\n      NestedKeyOf<NestedValueOf<Messages, NestedKey>>\n    >\n  >(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: TargetKey,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: TranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string {\n    const result = translateBaseFn(key, values, formats);\n\n    if (typeof result !== 'string') {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.INVALID_MESSAGE,\n        process.env.NODE_ENV !== 'production'\n          ? `The message \\`${key}\\` in ${\n              namespace ? `namespace \\`${namespace}\\`` : 'messages'\n            } didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`\n          : undefined\n      );\n    }\n\n    return result;\n  }\n\n  translateFn.rich = translateBaseFn;\n\n  translateFn.raw = (\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string\n  ): any => {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    try {\n      return resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n  };\n\n  return translateFn;\n}\n","/**\n * For the strictly typed messages to work we have to wrap the namespace into\n * a mandatory prefix. See https://stackoverflow.com/a/71529575/343045\n */\nexport default function resolveNamespace(\n  namespace: string,\n  namespacePrefix: string\n) {\n  return namespace === namespacePrefix\n    ? undefined\n    : namespace.slice((namespacePrefix + '.').length);\n}\n","import AbstractIntlMessages from './AbstractIntlMessages';\nimport {InitializedIntlConfig} from './IntlConfig';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport {RichTranslationValues, TranslationValue} from './TranslationValues';\nimport createBaseTranslator, {getMessagesOrError} from './createBaseTranslator';\nimport resolveNamespace from './resolveNamespace';\nimport NestedKeyOf from './utils/NestedKeyOf';\n\nexport type CoreRichTranslationValues = Record<\n  string,\n  TranslationValue | ((chunks: string) => string)\n>;\n\nexport type CreateTranslatorImplProps<Messages> = Omit<\n  InitializedIntlConfig,\n  'messages'\n> & {\n  namespace: string;\n  messages: Messages;\n};\n\nexport default function createTranslatorImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(\n  {\n    getMessageFallback,\n    messages,\n    namespace,\n    onError,\n    ...rest\n  }: CreateTranslatorImplProps<Messages>,\n  namespacePrefix: string\n) {\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the function invocation.\n  messages = messages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const translator = createBaseTranslator<Messages, NestedKey>({\n    ...rest,\n    onError,\n    getMessageFallback,\n    messagesOrError: getMessagesOrError({\n      messages,\n      namespace,\n      onError\n    }) as Messages | IntlError\n  });\n\n  const originalRich = translator.rich;\n\n  function base(...args: Parameters<typeof translator>) {\n    return translator(...args);\n  }\n\n  // Augment `t.rich` to return plain strings\n  base.rich = (\n    key: Parameters<typeof originalRich>[0],\n    /** Key value pairs for values to interpolate into the message. */\n    values: CoreRichTranslationValues,\n    formats?: Parameters<typeof originalRich>[2]\n  ): string => {\n    // `chunks` is returned as a string when no React element\n    // is used, therefore it's safe to cast this type.\n    const result = originalRich(key, values as RichTranslationValues, formats);\n\n    // When only string chunks are provided to the parser, only strings should be returned here.\n    if (typeof result !== 'string') {\n      const error = new IntlError(\n        IntlErrorCode.FORMATTING_ERROR,\n        process.env.NODE_ENV !== 'production'\n          ? \"`createTranslator` only accepts functions for rich text formatting that receive and return strings.\\n\\nE.g. t.rich('rich', {b: (chunks) => `<b>${chunks}</b>`})\"\n          : undefined\n      );\n\n      onError(error);\n      return getMessageFallback({error, key, namespace});\n    }\n\n    return result;\n  };\n\n  base.raw = translator.raw;\n\n  return base;\n}\n","import Formats from './Formats';\nimport IntlConfig from './IntlConfig';\nimport TranslationValues from './TranslationValues';\nimport createTranslatorImpl, {\n  CoreRichTranslationValues\n} from './createTranslatorImpl';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NamespaceKeys from './utils/NamespaceKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */\nexport default function createTranslator<\n  NestedKey extends NamespaceKeys<\n    IntlMessages,\n    NestedKeyOf<IntlMessages>\n  > = never\n>({\n  getMessageFallback = defaultGetMessageFallback,\n  messages,\n  namespace,\n  onError = defaultOnError,\n  ...rest\n}: Omit<IntlConfig<IntlMessages>, 'defaultTranslationValues' | 'messages'> & {\n  messages: NonNullable<IntlConfig<IntlMessages>['messages']>;\n  namespace?: NestedKey;\n}): // Explicitly defining the return type is necessary as TypeScript would get it wrong\n{\n  // Default invocation\n  <\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: TranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `rich`\n  rich<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: CoreRichTranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `raw`\n  raw<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey\n  ): any;\n} {\n  // We have to wrap the actual function so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return createTranslatorImpl<\n    {'!': IntlMessages},\n    [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n  >(\n    {\n      ...rest,\n      onError,\n      getMessageFallback,\n      messages: {'!': messages},\n      namespace: namespace ? `!.${namespace}` : '!'\n    },\n    '!'\n  );\n}\n","import DateTimeFormatOptions from './DateTimeFormatOptions';\nimport Formats from './Formats';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport NumberFormatOptions from './NumberFormatOptions';\nimport RelativeTimeFormatOptions from './RelativeTimeFormatOptions';\nimport TimeZone from './TimeZone';\nimport {defaultOnError} from './defaults';\n\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst WEEK = DAY * 7;\nconst MONTH = DAY * (365 / 12); // Approximation\nconst QUARTER = MONTH * 3;\nconst YEAR = DAY * 365;\n\nconst UNIT_SECONDS: Record<Intl.RelativeTimeFormatUnit, number> = {\n  second: SECOND,\n  seconds: SECOND,\n  minute: MINUTE,\n  minutes: MINUTE,\n  hour: HOUR,\n  hours: HOUR,\n  day: DAY,\n  days: DAY,\n  week: WEEK,\n  weeks: WEEK,\n  month: MONTH,\n  months: MONTH,\n  quarter: QUARTER,\n  quarters: QUARTER,\n  year: YEAR,\n  years: YEAR\n} as const;\n\nfunction resolveRelativeTimeUnit(seconds: number) {\n  const absValue = Math.abs(seconds);\n\n  if (absValue < MINUTE) {\n    return 'second';\n  } else if (absValue < HOUR) {\n    return 'minute';\n  } else if (absValue < DAY) {\n    return 'hour';\n  } else if (absValue < WEEK) {\n    return 'day';\n  } else if (absValue < MONTH) {\n    return 'week';\n  } else if (absValue < YEAR) {\n    return 'month';\n  }\n  return 'year';\n}\n\nfunction calculateRelativeTimeValue(\n  seconds: number,\n  unit: Intl.RelativeTimeFormatUnit\n) {\n  // We have to round the resulting values, as `Intl.RelativeTimeFormat`\n  // will include fractions like '2.1 hours ago'.\n  return Math.round(seconds / UNIT_SECONDS[unit]);\n}\n\ntype Props = {\n  locale: string;\n  timeZone?: TimeZone;\n  onError?(error: IntlError): void;\n  formats?: Partial<Formats>;\n  now?: Date;\n};\n\nexport default function createFormatter({\n  formats,\n  locale,\n  now: globalNow,\n  onError = defaultOnError,\n  timeZone: globalTimeZone\n}: Props) {\n  function resolveFormatOrOptions<Options>(\n    typeFormats: Record<string, Options> | undefined,\n    formatOrOptions?: string | Options\n  ) {\n    let options;\n    if (typeof formatOrOptions === 'string') {\n      const formatName = formatOrOptions;\n      options = typeFormats?.[formatName];\n\n      if (!options) {\n        const error = new IntlError(\n          IntlErrorCode.MISSING_FORMAT,\n          process.env.NODE_ENV !== 'production'\n            ? `Format \\`${formatName}\\` is not available. You can configure it on the provider or provide custom options.`\n            : undefined\n        );\n        onError(error);\n        throw error;\n      }\n    } else {\n      options = formatOrOptions;\n    }\n\n    return options;\n  }\n\n  function getFormattedValue<Value, Options>(\n    value: Value,\n    formatOrOptions: string | Options | undefined,\n    typeFormats: Record<string, Options> | undefined,\n    formatter: (options?: Options) => string\n  ) {\n    let options;\n    try {\n      options = resolveFormatOrOptions(typeFormats, formatOrOptions);\n    } catch (error) {\n      return String(value);\n    }\n\n    try {\n      return formatter(options);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(value);\n    }\n  }\n\n  function dateTime(\n    /** If a number is supplied, this is interpreted as a UTC timestamp. */\n    value: Date | number,\n    /** If a time zone is supplied, the `value` is converted to that time zone.\n     * Otherwise the user time zone will be used. */\n    formatOrOptions?: string | DateTimeFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.dateTime,\n      (options) => {\n        if (!options?.timeZone) {\n          if (globalTimeZone) {\n            options = {...options, timeZone: globalTimeZone};\n          } else {\n            onError(\n              new IntlError(\n                IntlErrorCode.ENVIRONMENT_FALLBACK,\n                process.env.NODE_ENV !== 'production'\n                  ? `The \\`timeZone\\` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#time-zone`\n                  : undefined\n              )\n            );\n          }\n        }\n\n        return new Intl.DateTimeFormat(locale, options).format(value);\n      }\n    );\n  }\n\n  function number(\n    value: number | bigint,\n    formatOrOptions?: string | NumberFormatOptions\n  ) {\n    return getFormattedValue(\n      value,\n      formatOrOptions,\n      formats?.number,\n      (options) => new Intl.NumberFormat(locale, options).format(value)\n    );\n  }\n\n  function getGlobalNow() {\n    if (globalNow) {\n      return globalNow;\n    } else {\n      onError(\n        new IntlError(\n          IntlErrorCode.ENVIRONMENT_FALLBACK,\n          process.env.NODE_ENV !== 'production'\n            ? `The \\`now\\` parameter wasn't provided and there is no global default configured. Consider adding a global default to avoid markup mismatches caused by environment differences. Learn more: https://next-intl-docs.vercel.app/docs/configuration#now`\n            : undefined\n        )\n      );\n      return new Date();\n    }\n  }\n\n  function extractNowDate(\n    nowOrOptions?: RelativeTimeFormatOptions['now'] | RelativeTimeFormatOptions\n  ) {\n    if (nowOrOptions instanceof Date || typeof nowOrOptions === 'number') {\n      return new Date(nowOrOptions);\n    }\n    if (nowOrOptions?.now !== undefined) {\n      return new Date(nowOrOptions.now);\n    }\n    return getGlobalNow();\n  }\n\n  function relativeTime(\n    /** The date time that needs to be formatted. */\n    date: number | Date,\n    /** The reference point in time to which `date` will be formatted in relation to.  */\n    nowOrOptions?: RelativeTimeFormatOptions['now'] | RelativeTimeFormatOptions\n  ) {\n    try {\n      const dateDate = new Date(date);\n      const nowDate = extractNowDate(nowOrOptions);\n      const seconds = (dateDate.getTime() - nowDate.getTime()) / 1000;\n\n      const unit =\n        typeof nowOrOptions === 'number' ||\n        nowOrOptions instanceof Date ||\n        nowOrOptions?.unit === undefined\n          ? resolveRelativeTimeUnit(seconds)\n          : nowOrOptions.unit;\n\n      const value = calculateRelativeTimeValue(seconds, unit);\n\n      return new Intl.RelativeTimeFormat(locale, {\n        numeric: 'auto'\n      }).format(value, unit);\n    } catch (error) {\n      onError(\n        new IntlError(IntlErrorCode.FORMATTING_ERROR, (error as Error).message)\n      );\n      return String(date);\n    }\n  }\n\n  function list(\n    value: Iterable<string>,\n    formatOrOptions?: string | Intl.ListFormatOptions\n  ) {\n    return getFormattedValue(value, formatOrOptions, formats?.list, (options) =>\n      new Intl.ListFormat(locale, options).format(value)\n    );\n  }\n\n  return {dateTime, number, relativeTime, list};\n}\n","import createFormatter from './createFormatter';\n\n/** @deprecated Switch to `createFormatter` */\nexport default function createIntl(\n  ...args: Parameters<typeof createFormatter>\n) {\n  const formatter = createFormatter(...args);\n  return {\n    formatDateTime: formatter.dateTime,\n    formatNumber: formatter.number,\n    formatRelativeTime: formatter.relativeTime\n  };\n}\n","import {createContext} from 'react';\nimport {InitializedIntlConfig} from '../core/IntlConfig';\nimport MessageFormatCache from '../core/MessageFormatCache';\n\nconst IntlContext = createContext<\n  | (InitializedIntlConfig & {\n      messageFormatCache?: MessageFormatCache;\n    })\n  | undefined\n>(undefined);\n\nexport default IntlContext;\n","import AbstractIntlMessages from './AbstractIntlMessages';\nimport IntlError, {IntlErrorCode} from './IntlError';\n\nfunction validateMessagesSegment(\n  messages: AbstractIntlMessages,\n  invalidKeyLabels: Array<string>,\n  parentPath?: string\n) {\n  Object.entries(messages).forEach(([key, messageOrMessages]) => {\n    if (key.includes('.')) {\n      let keyLabel = key;\n      if (parentPath) keyLabel += ` (at ${parentPath})`;\n      invalidKeyLabels.push(keyLabel);\n    }\n\n    if (messageOrMessages != null && typeof messageOrMessages === 'object') {\n      validateMessagesSegment(\n        messageOrMessages,\n        invalidKeyLabels,\n        [parentPath, key].filter((part) => part != null).join('.')\n      );\n    }\n  });\n}\n\nexport default function validateMessages(\n  messages: AbstractIntlMessages,\n  onError: (error: IntlError) => void\n) {\n  const invalidKeyLabels: Array<string> = [];\n  validateMessagesSegment(messages, invalidKeyLabels);\n\n  if (invalidKeyLabels.length > 0) {\n    onError(\n      new IntlError(\n        IntlErrorCode.INVALID_KEY,\n        process.env.NODE_ENV !== 'production'\n          ? `Namespace keys can not contain the character \".\" as this is used to express nesting. Please remove it or replace it with another character.\n\nInvalid ${\n              invalidKeyLabels.length === 1 ? 'key' : 'keys'\n            }: ${invalidKeyLabels.join(', ')}\n\nIf you're migrating from a flat structure, you can convert your messages as follows:\n\nimport {set} from \"lodash\";\n\nconst input = {\n  \"one.one\": \"1.1\",\n  \"one.two\": \"1.2\",\n  \"two.one.one\": \"2.1.1\"\n};\n\nconst output = Object.entries(input).reduce(\n  (acc, [key, value]) => set(acc, key, value),\n  {}\n);\n\n// Output:\n//\n// {\n//   \"one\": {\n//     \"one\": \"1.1\",\n//     \"two\": \"1.2\"\n//   },\n//   \"two\": {\n//     \"one\": {\n//       \"one\": \"2.1.1\"\n//     }\n//   }\n// }\n`\n          : undefined\n      )\n    );\n  }\n}\n","import IntlConfig from '../core/IntlConfig';\nimport {defaultGetMessageFallback, defaultOnError} from '../core/defaults';\nimport validateMessages from '../core/validateMessages';\n\n/**\n * Enhances the incoming props with defaults.\n */\nexport default function getInitializedConfig<\n  // This is a generic to allow for stricter typing. E.g.\n  // the RSC integration always provides a `now` value.\n  Props extends Omit<IntlConfig, 'children'>\n>({getMessageFallback, messages, onError, ...rest}: Props) {\n  const finalOnError = onError || defaultOnError;\n  const finalGetMessageFallback =\n    getMessageFallback || defaultGetMessageFallback;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (messages) {\n      validateMessages(messages, finalOnError);\n    }\n  }\n\n  return {\n    ...rest,\n    messages,\n    onError: finalOnError,\n    getMessageFallback: finalGetMessageFallback\n  };\n}\n","import React, {ReactNode, useState} from 'react';\nimport IntlConfig from '../core/IntlConfig';\nimport IntlContext from './IntlContext';\nimport getInitializedConfig from './getInitializedConfig';\n\ntype Props = IntlConfig & {\n  children: ReactNode;\n};\n\nexport default function IntlProvider({children, ...props}: Props) {\n  const [messageFormatCache] = useState(() => new Map());\n\n  return (\n    <IntlContext.Provider\n      value={{\n        ...getInitializedConfig(props),\n        messageFormatCache\n      }}\n    >\n      {children}\n    </IntlContext.Provider>\n  );\n}\n","import {useContext} from 'react';\nimport IntlContext from './IntlContext';\n\nexport default function useIntlContext() {\n  const context = useContext(IntlContext);\n\n  if (!context) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? 'No intl context found. Have you configured the provider?'\n        : undefined\n    );\n  }\n\n  return context;\n}\n","import {useMemo} from 'react';\nimport AbstractIntlMessages from '../core/AbstractIntlMessages';\nimport createBaseTranslator, {\n  getMessagesOrError\n} from '../core/createBaseTranslator';\nimport resolveNamespace from '../core/resolveNamespace';\nimport NestedKeyOf from '../core/utils/NestedKeyOf';\nimport useIntlContext from './useIntlContext';\n\nexport default function useTranslationsImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(allMessages: Messages, namespace: NestedKey, namespacePrefix: string) {\n  const {\n    defaultTranslationValues,\n    formats: globalFormats,\n    getMessageFallback,\n    locale,\n    messageFormatCache,\n    onError,\n    timeZone\n  } = useIntlContext();\n\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the hook invocation.\n  allMessages = allMessages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const messagesOrError = useMemo(\n    () => getMessagesOrError({messages: allMessages, namespace, onError}),\n    [allMessages, namespace, onError]\n  );\n\n  const translate = useMemo(\n    () =>\n      createBaseTranslator({\n        messageFormatCache,\n        getMessageFallback,\n        messagesOrError,\n        defaultTranslationValues,\n        namespace,\n        onError,\n        formats: globalFormats,\n        locale,\n        timeZone\n      }),\n    [\n      messageFormatCache,\n      getMessageFallback,\n      messagesOrError,\n      defaultTranslationValues,\n      namespace,\n      onError,\n      globalFormats,\n      locale,\n      timeZone\n    ]\n  );\n\n  return translate;\n}\n","import {ReactElement, ReactNodeArray} from 'react';\nimport Formats from '../core/Formats';\nimport TranslationValues, {\n  RichTranslationValues\n} from '../core/TranslationValues';\nimport MessageKeys from '../core/utils/MessageKeys';\nimport NamespaceKeys from '../core/utils/NamespaceKeys';\nimport NestedKeyOf from '../core/utils/NestedKeyOf';\nimport NestedValueOf from '../core/utils/NestedValueOf';\nimport useIntlContext from './useIntlContext';\nimport useTranslationsImpl from './useTranslationsImpl';\n\n/**\n * Translates messages from the given namespace by using the ICU syntax.\n * See https://formatjs.io/docs/core-concepts/icu-syntax.\n *\n * If no namespace is provided, all available messages are returned.\n * The namespace can also indicate nesting by using a dot\n * (e.g. `namespace.Component`).\n */\nexport default function useTranslations<\n  NestedKey extends NamespaceKeys<\n    IntlMessages,\n    NestedKeyOf<IntlMessages>\n  > = never\n>(\n  namespace?: NestedKey\n): // Explicitly defining the return type is necessary as TypeScript would get it wrong\n{\n  // Default invocation\n  <\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: TranslationValues,\n    formats?: Partial<Formats>\n  ): string;\n\n  // `rich`\n  rich<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey,\n    values?: RichTranslationValues,\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray;\n\n  // `raw`\n  raw<\n    TargetKey extends MessageKeys<\n      NestedValueOf<\n        {'!': IntlMessages},\n        [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n      >,\n      NestedKeyOf<\n        NestedValueOf<\n          {'!': IntlMessages},\n          [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n        >\n      >\n    >\n  >(\n    key: TargetKey\n  ): any;\n} {\n  const context = useIntlContext();\n  const messages = context.messages as IntlMessages;\n\n  // We have to wrap the actual hook so the type inference for the optional\n  // namespace works correctly. See https://stackoverflow.com/a/71529575/343045\n  // The prefix (\"!\") is arbitrary.\n  return useTranslationsImpl<\n    {'!': IntlMessages},\n    [NestedKey] extends [never] ? '!' : `!.${NestedKey}`\n  >(\n    {'!': messages},\n    // @ts-expect-error\n    namespace ? `!.${namespace}` : '!',\n    '!'\n  );\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useLocale() {\n  return useIntlContext().locale;\n}\n","import {useState, useEffect} from 'react';\nimport useIntlContext from './useIntlContext';\n\ntype Options = {\n  updateInterval?: number;\n};\n\nfunction getNow() {\n  return new Date();\n}\n\n/**\n * Reading the current date via `new Date()` in components should be avoided, as\n * it causes components to be impure and can lead to flaky tests. Instead, this\n * hook can be used.\n *\n * By default, it returns the time when the component mounts. If `updateInterval`\n * is specified, the value will be updated based on the interval.\n *\n * You can however also return a static value from this hook, if you\n * configure the `now` parameter on the context provider. Note however,\n * that if `updateInterval` is configured in this case, the component\n * will initialize with the global value, but will afterwards update\n * continuously based on the interval.\n *\n * For unit tests, this can be mocked to a constant value. For end-to-end\n * testing, an environment parameter can be passed to the `now` parameter\n * of the provider to mock this to a static value.\n */\nexport default function useNow(options?: Options) {\n  const updateInterval = options?.updateInterval;\n\n  const {now: globalNow} = useIntlContext();\n  const [now, setNow] = useState(globalNow || getNow());\n\n  useEffect(() => {\n    if (!updateInterval) return;\n\n    const intervalId = setInterval(() => {\n      setNow(getNow());\n    }, updateInterval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [globalNow, updateInterval]);\n\n  return now;\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useTimeZone() {\n  return useIntlContext().timeZone;\n}\n","import useIntlContext from './useIntlContext';\n\nexport default function useMessages() {\n  return useIntlContext().messages;\n}\n","import {useMemo} from 'react';\nimport createFormatter from '../core/createFormatter';\nimport useIntlContext from './useIntlContext';\n\nexport default function useFormatter() {\n  const {formats, locale, now: globalNow, onError, timeZone} = useIntlContext();\n\n  return useMemo(\n    () =>\n      createFormatter({\n        formats,\n        locale,\n        now: globalNow,\n        onError,\n        timeZone\n      }),\n    [formats, globalNow, locale, onError, timeZone]\n  );\n}\n","import {useMemo} from 'react';\nimport createIntl from '../core/createIntl';\nimport useIntlContext from './useIntlContext';\n\nlet hasWarned = false;\n\n/** @deprecated Switch to `useFormatter` instead. */\nexport default function useIntl() {\n  const {formats, locale, now: globalNow, onError, timeZone} = useIntlContext();\n\n  if (!hasWarned) {\n    hasWarned = true;\n    console.warn(\n      '`useIntl()` is deprecated and will be removed in the next major version. Please switch to `useFormatter()`.'\n    );\n  }\n\n  return useMemo(\n    () =>\n      createIntl({\n        formats,\n        locale,\n        now: globalNow,\n        onError,\n        timeZone\n      }),\n    [formats, globalNow, locale, onError, timeZone]\n  );\n}\n"],"names":["IntlErrorCode","IntlError","_Error","_inheritsLoose","code","originalMessage","_this","message","call","_wrapNativeSuper","Error","setTimeZoneInFormats","formats","timeZone","Object","keys","reduce","acc","key","_extends","convertFormatsToIntlMessageFormat","formatsWithTimeZone","dateTime","mfDateDefaults","IntlMessageFormat","date","defaultDateFormats","mfTimeDefaults","time","defaultTimeFormats","defaultGetMessageFallback","props","namespace","filter","part","join","defaultOnError","error","console","resolvePath","messages","split","forEach","next","prepareTranslationValues","values","length","undefined","transformedValues","index","value","transformed","chunks","result","isValidElement","cloneElement","getMessagesOrError","_ref","_ref$onError","onError","process","retrievedMessages","intlError","MISSING_MESSAGE","getPlainMessage","candidate","unescapedMessage","replace","hasPlaceholders","test","createBaseTranslator","_ref2","defaultTranslationValues","globalFormats","_ref2$getMessageFallb","getMessageFallback","locale","messageFormatCache","messagesOrError","getFallbackFromErrorAndNotify","translateBaseFn","joinPath","parts","cacheKey","String","messageFormat","has","get","errorMessage","Array","isArray","INVALID_MESSAGE","INSUFFICIENT_PATH","plainMessage","set","formattedMessage","format","FORMATTING_ERROR","translateFn","rich","raw","resolveNamespace","namespacePrefix","slice","createTranslatorImpl","rest","_objectWithoutPropertiesLoose","_excluded","translator","originalRich","base","apply","arguments","createTranslator","_ref$getMessageFallba","SECOND","MINUTE","HOUR","DAY","WEEK","MONTH","QUARTER","YEAR","UNIT_SECONDS","second","seconds","minute","minutes","hour","hours","day","days","week","weeks","month","months","quarter","quarters","year","years","resolveRelativeTimeUnit","absValue","Math","abs","calculateRelativeTimeValue","unit","round","createFormatter","globalNow","now","globalTimeZone","resolveFormatOrOptions","typeFormats","formatOrOptions","options","formatName","MISSING_FORMAT","getFormattedValue","formatter","_options","ENVIRONMENT_FALLBACK","Intl","DateTimeFormat","number","NumberFormat","getGlobalNow","Date","extractNowDate","nowOrOptions","relativeTime","dateDate","nowDate","getTime","RelativeTimeFormat","numeric","list","ListFormat","createIntl","formatDateTime","formatNumber","formatRelativeTime","IntlContext","createContext","validateMessagesSegment","invalidKeyLabels","parentPath","entries","messageOrMessages","includes","keyLabel","push","validateMessages","INVALID_KEY","getInitializedConfig","finalOnError","finalGetMessageFallback","IntlProvider","children","_useState","useState","Map","React","createElement","Provider","useIntlContext","context","useContext","useTranslationsImpl","allMessages","_useIntlContext","useMemo","translate","useTranslations","useLocale","getNow","useNow","updateInterval","setNow","useEffect","intervalId","setInterval","clearInterval","useTimeZone","useMessages","useFormatter","hasWarned","useIntl","warn"],"mappings":"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"}