import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/next-intl.esm.js';
import { useRouter } from 'next/router';
import React from 'react';
import { IntlProvider } from 'use-intl';

var _excluded = ["locale"];
function NextIntlProvider(_ref) {
  var locale = _ref.locale,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded);

  var router;

  try {
    // Reading from context is practically ok to do conditionally
    // eslint-disable-next-line react-hooks/rules-of-hooks
    router = useRouter();
  } catch (error) {// Calling `useRouter` is not supported in the app folder
  } // The router can be undefined if used in a context outside
  // of Next.js (e.g. unit tests, Storybook, ...)


  if (!locale && router) {
    locale = router.locale;
  }

  if (!locale) {
    throw new Error(process.env.NODE_ENV !== 'production' ? "Couldn't determine locale. Please pass an explicit `locale` prop the provider, or if you're using the `pages` folder, use internationalized routing (https://nextjs.org/docs/advanced-features/i18n-routing)." : undefined);
  }

  return React.createElement(IntlProvider, _extends({
    locale: locale
  }, rest));
}

export { NextIntlProvider as default };
//# sourceMappingURL=next-intl.esm.js.map
